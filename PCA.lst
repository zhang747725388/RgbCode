C51 COMPILER V9.52.0.0   PCA                                                               04/14/2016 21:31:09 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN PCA.obj
COMPILER INVOKED BY: C:\keilC51\C51\BIN\C51.EXE BSP\PCA.c BROWSE INCDIR(.\APP;.\BSP;..\..\CodeGroup;..\rgbcode) DEBUG OB
                    -JECTEXTEND PRINT(.\PCA.lst) TABS(2) OBJECT(PCA.obj)

line level    source

   1           
   2          
   3          
   4          #include "rsystem.h"
   5          bit   B_Capture0,B_Capture1,B_Capture2,B_Capture3;
   6          u8    PCA0_mode,PCA1_mode,PCA2_mode,PCA3_mode;
   7          u16   CCAP0_tmp,PCA_Timer0;
   8          u16   CCAP1_tmp,PCA_Timer1;
   9          u16   CCAP2_tmp,PCA_Timer2;
  10          u16   CCAP3_tmp,PCA_Timer3;
  11          
  12          /*************  功能说明  **************
  13          
  14          
  15          ******************************************/
  16          
  17          void  PCA_config(void)
  18          {
  19   1        PCA_InitTypeDef   PCA_InitStructure;
  20   1      
  21   1        PCA_InitStructure.PCA_Clock    = PCA_Clock_1T;    //PCA_Clock_1T, PCA_Clock_2T, PCA_Clock_4T, PCA_Clock_6T,
             - PCA_Clock_8T, PCA_Clock_12T, PCA_Clock_Timer0_OF, PCA_Clock_ECI
  22   1        PCA_InitStructure.PCA_IoUse    = PCA_P24_P25_P26_P27; //PCA_P12_P11_P10_P37, PCA_P34_P35_P36_P37, PCA_P24
             -_P25_P26_P27
  23   1        PCA_InitStructure.PCA_Interrupt_Mode = DISABLE;   //ENABLE, DISABLE
  24   1        PCA_InitStructure.PCA_Polity   = PolityLow;     //优先级设置  PolityHigh,PolityLow
  25   1        PCA_InitStructure.PCA_RUN      = DISABLE;     //ENABLE, DISABLE
  26   1        PCA_Init(PCA_Counter,&PCA_InitStructure);
  27   1      
  28   1      //  PCA_InitStructure.PCA_Mode     = PCA_Mode_PWM;    //PCA_Mode_PWM, PCA_Mode_Capture, PCA_Mode_SoftTimer, P
             -CA_Mode_HighPulseOutput
  29   1      //  PCA_InitStructure.PCA_PWM_Wide = PCA_PWM_8bit;    //PCA_PWM_8bit, PCA_PWM_7bit, PCA_PWM_6bit
  30   1      //  PCA_InitStructure.PCA_Interrupt_Mode = DISABLE;   //PCA_Rise_Active, PCA_Fall_Active, ENABLE, DISABLE
  31   1      //  PCA_InitStructure.PCA_Value    = 128 << 8;      //对于PWM,高8位为PWM占空比
  32   1      //  PCA_Init(PCA0,&PCA_InitStructure);
  33   1      
  34   1        PCA_InitStructure.PCA_Mode     = PCA_Mode_PWM;    //PCA_Mode_PWM, PCA_Mode_Capture, PCA_Mode_SoftTimer, PCA
             -_Mode_HighPulseOutput
  35   1        PCA_InitStructure.PCA_PWM_Wide = PCA_PWM_7bit;    //PCA_PWM_8bit, PCA_PWM_7bit, PCA_PWM_6bit
  36   1        PCA_InitStructure.PCA_Interrupt_Mode = DISABLE;   //PCA_Rise_Active, PCA_Fall_Active, ENABLE, DISABLE
  37   1        PCA_InitStructure.PCA_Value    = 64 << 8;     //对于PWM,高8位为PWM占空比
  38   1        PCA_Init(PCA1,&PCA_InitStructure);
  39   1      
  40   1        PCA_InitStructure.PCA_Mode     = PCA_Mode_PWM;    //PCA_Mode_PWM, PCA_Mode_Capture, PCA_Mode_SoftTimer, PCA
             -_Mode_HighPulseOutput
  41   1        PCA_InitStructure.PCA_PWM_Wide = PCA_PWM_6bit;    //PCA_PWM_8bit, PCA_PWM_7bit, PCA_PWM_6bit
  42   1        PCA_InitStructure.PCA_Interrupt_Mode = DISABLE;   //PCA_Rise_Active, PCA_Fall_Active, ENABLE, DISABLE
  43   1        PCA_InitStructure.PCA_Value    = 32 << 8;     //对于PWM,高8位为PWM占空比
  44   1        PCA_Init(PCA2,&PCA_InitStructure);
  45   1        
  46   1        
  47   1        
  48   1        PCA_InitStructure.PCA_Mode     = PCA_Mode_PWM;    //PCA_Mode_PWM, PCA_Mode_Capture, PCA_Mode_SoftTimer, PCA
             -_Mode_HighPulseOutput
C51 COMPILER V9.52.0.0   PCA                                                               04/14/2016 21:31:09 PAGE 2   

  49   1        PCA_InitStructure.PCA_PWM_Wide = PCA_PWM_6bit;    //PCA_PWM_8bit, PCA_PWM_7bit, PCA_PWM_6bit
  50   1        PCA_InitStructure.PCA_Interrupt_Mode = DISABLE;   //PCA_Rise_Active, PCA_Fall_Active, ENABLE, DISABLE
  51   1        PCA_InitStructure.PCA_Value    = 32 << 8;     //对于PWM,高8位为PWM占空比
  52   1        PCA_Init(PCA3,&PCA_InitStructure);
  53   1      
  54   1        CR = 1;
  55   1      }
  56          
  57          
  58          //========================================================================
  59          // 函数: UpdatePwm(u8 PCA_id, u8 pwm_value)
  60          // 描述: 更新PWM值. 
  61          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  62          //       pwm_value: pwm值, 这个值是输出低电平的时间.
  63          // 返回: none.
  64          // 版本: V1.0, 
  65          //========================================================================
  66          void  UpdatePwm(u8 PCA_id, u8 pwm_value)
  67          {
  68   1        if(PCA_id == PCA0)      CCAP0H = pwm_value;
  69   1        else if(PCA_id == PCA1) CCAP1H = pwm_value;
  70   1        else if(PCA_id == PCA2) CCAP2H = pwm_value;
  71   1        else if(PCA_id == PCA3) CCAP3H = pwm_value;
  72   1      }
  73          
  74          //========================================================================
  75          // 函数: void PCA_Init(PCA_id, PCA_InitTypeDef *PCAx)
  76          // 描述: PCA初始化程序.
  77          // 参数: PCA_id: PCA序号. 取值 PCA0,PCA1,PCA2,PCA_Counter
  78          //     PCAx: 结构参数,请参考PCA.h里的定义.
  79          // 返回: none.
  80          // 版本: V1.0, 
  81          //========================================================================
  82          void  PCA_Init(u8 PCA_id, PCA_InitTypeDef *PCAx)
  83          {
  84   1        if(PCA_id > PCA_Counter)  return;   //id错误
  85   1      
  86   1        if(PCA_id == PCA_Counter)     //设置公用Counter
  87   1        {
  88   2          CR = 0;
  89   2          CH = 0;
  90   2          CL = 0;
  91   2          AUXR1 = (AUXR1 & ~(3<<4)) | PCAx->PCA_IoUse;      //切换IO口
  92   2          CMOD  = (CMOD  & ~(7<<1)) | PCAx->PCA_Clock;      //选择时钟源
  93   2          CMOD  = (CMOD  & ~1) | (PCAx->PCA_Interrupt_Mode & 1);  //ECF
  94   2          if(PCAx->PCA_Polity == PolityHigh)    PPCA = 1; //高优先级中断
  95   2          else                  PPCA = 0; //低优先级中断
  96   2          if(PCAx->PCA_RUN == ENABLE) CR = 1;
  97   2          return;
  98   2        }
  99   1      
 100   1        PCAx->PCA_Interrupt_Mode &= (3<<4) + 1;
 101   1        if(PCAx->PCA_Mode >= PCA_Mode_SoftTimer)  PCAx->PCA_Interrupt_Mode &= ~(3<<4);
 102   1      
 103   1        if(PCA_id == PCA0)
 104   1        {
 105   2          CCAPM0    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;  //工作模式, 中断模式
 106   2          PCA_PWM0  = (PCA_PWM0 & ~(3<<6)) | PCAx->PCA_PWM_Wide;  //PWM宽度
 107   2      
 108   2          PCA_Timer0 = PCAx->PCA_Value;
 109   2          B_Capture0 = 0;
 110   2          PCA0_mode = PCAx->PCA_Mode;
C51 COMPILER V9.52.0.0   PCA                                                               04/14/2016 21:31:09 PAGE 3   

 111   2          CCAP0_tmp = PCA_Timer0;
 112   2          CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 113   2          CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 114   2        }
 115   1        if(PCA_id == PCA1)
 116   1        {
 117   2          CCAPM1    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 118   2          PCA_PWM1  = (PCA_PWM1 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 119   2      
 120   2          PCA_Timer1 = PCAx->PCA_Value;
 121   2          B_Capture1 = 0;
 122   2          PCA1_mode = PCAx->PCA_Mode;
 123   2          CCAP1_tmp = PCA_Timer1;
 124   2          CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 125   2          CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 126   2        }
 127   1        if(PCA_id == PCA2)
 128   1        {
 129   2          CCAPM2    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 130   2          PCA_PWM2  = (PCA_PWM2 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 131   2      
 132   2          PCA_Timer2 = PCAx->PCA_Value;
 133   2          B_Capture2 = 0;
 134   2          PCA2_mode = PCAx->PCA_Mode;
 135   2          CCAP2_tmp = PCA_Timer2;
 136   2          CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 137   2          CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 138   2        }
 139   1        
 140   1          if(PCA_id == PCA3)
 141   1        {
 142   2          CCAPM3    = PCAx->PCA_Mode | PCAx->PCA_Interrupt_Mode;
 143   2          PCA_PWM3  = (PCA_PWM3 & ~(3<<6)) | PCAx->PCA_PWM_Wide;
 144   2      
 145   2          PCA_Timer3 = PCAx->PCA_Value;
 146   2          B_Capture3 = 0;
 147   2          PCA3_mode = PCAx->PCA_Mode;
 148   2          CCAP3_tmp = PCA_Timer3;
 149   2          CCAP3L = (u8)CCAP3_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 150   2          CCAP3H = (u8)(CCAP3_tmp >> 8);  //后写CCAP0H
 151   2        }
 152   1        
 153   1        
 154   1      }
 155          
 156          
 157          //========================================================================
 158          // 函数: void PCA_Handler (void) interrupt PCA_VECTOR
 159          // 描述: PCA中断处理程序.
 160          // 参数: None
 161          // 返回: none.
 162          // 版本: V1.0, 
 163          //========================================================================
 164          void  PCA_Handler (void) interrupt PCA_VECTOR
 165          {
 166   1        if(CCF0)    //PCA模块0中断
 167   1        {
 168   2          CCF0 = 0;   //清PCA模块0中断标志
 169   2          if(PCA0_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 170   2          {
 171   3            CCAP0_tmp += PCA_Timer0;
 172   3            CCAP0L = (u8)CCAP0_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
C51 COMPILER V9.52.0.0   PCA                                                               04/14/2016 21:31:09 PAGE 4   

 173   3            CCAP0H = (u8)(CCAP0_tmp >> 8);  //后写CCAP0H
 174   3          }
 175   2          else if(PCA0_mode == PCA_Mode_Capture)
 176   2          {
 177   3            CCAP0_tmp = CCAP0H; //读CCAP0H
 178   3            CCAP0_tmp = (CCAP0_tmp << 8) + CCAP0L;
 179   3            B_Capture0 = 1;
 180   3          }
 181   2        }
 182   1      
 183   1        if(CCF1)  //PCA模块1中断
 184   1        {
 185   2          CCF1 = 0;   //清PCA模块1中断标志
 186   2          if(PCA1_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 187   2          {
 188   3            CCAP1_tmp += PCA_Timer1;
 189   3            CCAP1L = (u8)CCAP1_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 190   3            CCAP1H = (u8)(CCAP1_tmp >> 8);  //后写CCAP0H
 191   3          }
 192   2          else if(PCA1_mode == PCA_Mode_Capture)
 193   2          {
 194   3            CCAP1_tmp = CCAP1H; //读CCAP1H
 195   3            CCAP1_tmp = (CCAP1_tmp << 8) + CCAP1L;
 196   3            B_Capture1 = 1;
 197   3          }
 198   2        }
 199   1      
 200   1        if(CCF2)  //PCA模块2中断
 201   1        {
 202   2          CCF2 = 0;   //清PCA模块1中断标志
 203   2          if(PCA2_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 204   2          {
 205   3            CCAP2_tmp += PCA_Timer2;
 206   3            CCAP2L = (u8)CCAP2_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 207   3            CCAP2H = (u8)(CCAP2_tmp >> 8);  //后写CCAP0H
 208   3          }
 209   2          else if(PCA2_mode == PCA_Mode_Capture)
 210   2          {
 211   3            CCAP2_tmp = CCAP2H; //读CCAP2H
 212   3            CCAP2_tmp = (CCAP2_tmp << 8) + CCAP2L;
 213   3            B_Capture2 = 1;
 214   3          }
 215   2        }
 216   1      
 217   1        
 218   1          if(CCF3)  //PCA模块3中断
 219   1        {
 220   2          CCF3 = 0;   //清PCA模块1中断标志
 221   2          if(PCA3_mode >= PCA_Mode_SoftTimer)   //PCA_Mode_SoftTimer and PCA_Mode_HighPulseOutput
 222   2          {
 223   3            CCAP3_tmp += PCA_Timer3;
 224   3            CCAP3L = (u8)CCAP3_tmp;     //将影射寄存器写入捕获寄存器，先写CCAP0L
 225   3            CCAP3H = (u8)(CCAP3_tmp >> 8);  //后写CCAP0H
 226   3          }
 227   2          else if(PCA3_mode == PCA_Mode_Capture)
 228   2          {
 229   3            CCAP3_tmp = CCAP3H; //读CCAP2H
 230   3            CCAP3_tmp = (CCAP3_tmp << 8) + CCAP3L;
 231   3            B_Capture3 = 1;
 232   3          }
 233   2        }
 234   1        
C51 COMPILER V9.52.0.0   PCA                                                               04/14/2016 21:31:09 PAGE 5   

 235   1        if(CF)  //PCA溢出中断
 236   1        {
 237   2          CF = 0;     //清PCA溢出中断标志
 238   2        }
 239   1      
 240   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    828    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
