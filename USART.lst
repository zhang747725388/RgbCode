C51 COMPILER V9.52.0.0   USART                                                             04/14/2016 21:31:09 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE USART
OBJECT MODULE PLACED IN USART.obj
COMPILER INVOKED BY: C:\keilC51\C51\BIN\C51.EXE BSP\USART.C BROWSE INCDIR(.\APP;.\BSP;..\..\CodeGroup;..\rgbcode) DEBUG 
                    -OBJECTEXTEND PRINT(.\USART.lst) TABS(2) OBJECT(USART.obj)

line level    source

   1          #include "rsystem.h"
   2          
   3          COMx_Define COM1,COM2;
   4          u8  xdata TX1_Buffer[COM_TX1_Lenth];  //发送缓冲
   5          u8  xdata RX1_Buffer[COM_RX1_Lenth];  //接收缓冲
   6          /*************  串口1初始化函数 *****************/
   7          void  UART_config(void)
   8          {
   9   1         COMx_InitDefine    COMx_InitStructure;         //结构定义
  10   1      //  COMx_InitStructure.UART_Mode      = UART_8bit_BRTx;   //模式,       UART_ShiftRight,UART_8bit_BRTx,UART_
             -9bit,UART_9bit_BRTx
  11   1      //  COMx_InitStructure.UART_BRT_Use   = BRT_Timer1;     //使用波特率,   BRT_Timer1, BRT_Timer2 (注意: 串口2固
             -定使用BRT_Timer2)
  12   1          COMx_InitStructure.UART_BaudRate  = 115200ul;     //波特率, 一般 110 ~ 115200
  13   1      //  COMx_InitStructure.UART_RxEnable  = ENABLE;       //接收允许,   ENABLE或DISABLE
  14   1      //  COMx_InitStructure.BaudRateDouble = DISABLE;      //波特率加倍, ENABLE或DISABLE
  15   1      //  COMx_InitStructure.UART_Interrupt = ENABLE;       //中断允许,   ENABLE或DISABLE
  16   1      //  COMx_InitStructure.UART_Polity    = PolityLow;      //中断优先级, PolityLow,PolityHigh
  17   1      //  COMx_InitStructure.UART_P_SW      = UART1_SW_P30_P31; //切换端口,   UART1_SW_P30_P31,UART1_SW_P36_P37,U
             -ART1_SW_P16_P17(必须使用内部时钟)
  18   1      //  COMx_InitStructure.UART_RXD_TXD_Short = DISABLE;    //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
  19   1      //  USART_Configuration(USART1, &COMx_InitStructure);   //初始化串口1 USART1,USART2
  20   1      
  21   1        
  22   1       
  23   1          SCON = 0xda;            //9-bit variable UART, parity bit initial to 1
  24   1          TMOD = 0x20;            //Set Timer1 as 8-bit auto reload mode
  25   1          TH1 = TL1 = -(MAIN_Fosc/12/32/9600); //Set auto-reload vaule
  26   1          TR1 = 1;                //Timer1 start run
  27   1          ES = 1;                 //Enable UART interrupt
  28   1          
  29   1         
  30   1      }
  31          u8 USART_Configuration(u8 UARTx, COMx_InitDefine *COMx)
  32          {
  33   1        u8  i;
  34   1        u32 j;
  35   1        
  36   1        if(UARTx == USART1)
  37   1        {
  38   2          COM1.id = 1;
  39   2          COM1.TX_read    = 0;
  40   2          COM1.TX_write   = 0;
  41   2          COM1.B_TX_busy  = 0;
  42   2          COM1.RX_Cnt     = 0;
  43   2          COM1.RX_TimeOut = 0;
  44   2          COM1.B_RX_OK    = 0;
  45   2          for(i=0; i<COM_TX1_Lenth; i++)  TX1_Buffer[i] = 0;
  46   2          for(i=0; i<COM_RX1_Lenth; i++)  RX1_Buffer[i] = 0;
  47   2      
  48   2          if(COMx->UART_Mode > UART_9bit_BRTx)  return 2; //模式错误
  49   2          if(COMx->UART_Polity == PolityHigh)   PS = 1; //高优先级中断
  50   2          else                  PS = 0; //低优先级中断
  51   2          SCON = (SCON & 0x3f) | COMx->UART_Mode;
C51 COMPILER V9.52.0.0   USART                                                             04/14/2016 21:31:09 PAGE 2   

  52   2          if((COMx->UART_Mode == UART_9bit_BRTx) ||(COMx->UART_Mode == UART_8bit_BRTx)) //可变波特率
  53   2          {
  54   3            j = (MAIN_Fosc /4) / COMx->UART_BaudRate; //按1T计算
  55   3            if(j >= 65536UL)  return 2; //错误
  56   3            j = 65536UL - j;
  57   3            if(COMx->UART_BRT_Use == BRT_Timer1)
  58   3            {
  59   4              TR1 = 0;
  60   4              AUXR &= ~0x01;    //S1 BRT Use Timer1;
  61   4              TMOD &= ~(1<<6);  //Timer1 set As Timer
  62   4              TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  63   4              AUXR |=  (1<<6);  //Timer1 set as 1T mode
  64   4              TH1 = (u8)(j>>8);
  65   4              TL1 = (u8)j;
  66   4              ET1 = 0;  //禁止中断
  67   4              TMOD &= ~0x40;  //定时
  68   4              INT_CLKO &= ~0x02;  //不输出时钟
  69   4              TR1  = 1;
  70   4            }
  71   3            else if(COMx->UART_BRT_Use == BRT_Timer2)
  72   3            {
  73   4              AUXR &= ~(1<<4);  //Timer stop
  74   4              AUXR |= 0x01;   //S1 BRT Use Timer2;
  75   4              AUXR &= ~(1<<3);  //Timer2 set As Timer
  76   4              AUXR |=  (1<<2);  //Timer2 set as 1T mode
  77   4              TH2 = (u8)(j>>8);
  78   4              TL2 = (u8)j;
  79   4              IE2  &= ~(1<<2);  //禁止中断
  80   4              AUXR &= ~(1<<3);  //定时
  81   4              AUXR |=  (1<<4);  //Timer run enable
  82   4            }
  83   3            else return 2;  //错误
  84   3          }
  85   2          else if(COMx->UART_Mode == UART_ShiftRight)
  86   2          {
  87   3            if(COMx->BaudRateDouble == ENABLE)  AUXR |=  (1<<5);  //固定波特率SysClk/2
  88   3            else                AUXR &= ~(1<<5);  //固定波特率SysClk/12
  89   3          }
  90   2          else if(COMx->UART_Mode == UART_9bit) //固定波特率SysClk*2^SMOD/64
  91   2          {
  92   3            if(COMx->BaudRateDouble == ENABLE)  PCON |=  (1<<7);  //固定波特率SysClk/32
  93   3            else                PCON &= ~(1<<7);  //固定波特率SysClk/64
  94   3          }
  95   2          if(COMx->UART_Interrupt == ENABLE)  ES = 1; //允许中断
  96   2          else                ES = 0; //禁止中断
  97   2          if(COMx->UART_RxEnable == ENABLE) REN = 1;  //允许接收
  98   2          else                REN = 0;  //禁止接收
  99   2          P_SW1 = (P_SW1 & 0x3f) | (COMx->UART_P_SW & 0xc0);  //切换IO
 100   2          if(COMx->UART_RXD_TXD_Short == ENABLE)  PCON2 |=  (1<<4); //内部短路RXD与TXD, 做中继, ENABLE,DISABLE
 101   2          else                  PCON2 &= ~(1<<4);
 102   2          return  0;
 103   2        }
 104   1      
 105   1       
 106   1      }
 107          
 108          
 109          /*************** 装载串口发送缓冲 *******************************/
 110          
 111          void TX1_write2buff(u8 dat) //写入发送缓冲，指针+1
 112          {
 113   1        TX1_Buffer[COM1.TX_write] = dat;  //装发送缓冲
C51 COMPILER V9.52.0.0   USART                                                             04/14/2016 21:31:09 PAGE 3   

 114   1        if(++COM1.TX_write >= COM_TX1_Lenth)  COM1.TX_write = 0;
 115   1      
 116   1        if(COM1.B_TX_busy == 0)   //空闲
 117   1        {  
 118   2          COM1.B_TX_busy = 1;   //标志忙
 119   2          TI = 1;         //触发发送中断
 120   2        }
 121   1      }
 122          
 123           
 124          
 125          void PrintString1(u8 *puts)
 126          {
 127   1          for (; *puts != 0;  puts++)  TX1_write2buff(*puts);   //遇到停止符0结束
 128   1      }
 129          
 130           
 131          /*
 132          void COMx_write2buff(COMx_Define *COMx, u8 dat) //写入发送缓冲，指针+1
 133          {
 134            if(COMx->id == 1) TX1_write2buff(dat);
 135            if(COMx->id == 2) TX2_write2buff(dat);
 136          }
 137          
 138          void PrintString(COMx_Define *COMx, u8 *puts)
 139          {
 140              for (; *puts != 0;  puts++)  COMx_write2buff(COMx,*puts);   //遇到停止符0结束
 141          }
 142          */
 143          
 144          
 145          /********************* UART1中断函数************************/
 146          void UART1_int (void) interrupt UART1_VECTOR
 147          {
 148   1        if(RI)
 149   1        {
 150   2          RI = 0;
 151   2          if(COM1.B_RX_OK == 0)
 152   2          {
 153   3            if(COM1.RX_Cnt >= COM_RX1_Lenth)  COM1.RX_Cnt = 0;
 154   3            RX1_Buffer[COM1.RX_Cnt++] = SBUF;
 155   3            COM1.RX_TimeOut = TimeOutSet1;
 156   3          }
 157   2        }
 158   1      
 159   1        if(TI)
 160   1        {
 161   2          TI = 0;
 162   2          if(COM1.TX_read != COM1.TX_write)
 163   2          {
 164   3            SBUF = TX1_Buffer[COM1.TX_read];
 165   3            if(++COM1.TX_read >= COM_TX1_Lenth)   COM1.TX_read = 0;
 166   3          }
 167   2          else  COM1.B_TX_busy = 0;
 168   2        }
 169   1      }
 170          
 171           
 172          
 173          
 174          
*** WARNING C291 IN LINE 106 OF BSP\USART.C: not every exit path returns a value
C51 COMPILER V9.52.0.0   USART                                                             04/14/2016 21:31:09 PAGE 4   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    597    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    256    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
