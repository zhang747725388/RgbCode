C51 COMPILER V9.52.0.0   TIMER                                                             04/18/2016 13:40:32 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.obj
COMPILER INVOKED BY: C:\keilC51\C51\BIN\C51.EXE BSP\Timer.c BROWSE INCDIR(.\APP;.\BSP;..\..\CodeGroup;..\rgbcode) DEBUG 
                    -OBJECTEXTEND PRINT(.\Timer.lst) TABS(2) OBJECT(Timer.obj)

line level    source

   1          /*************  功能说明  **************
   2           
   3          
   4          ******************************************/
   5          
   6          
   7          
   8          #include "rsystem.h"
   9          INT32U  r_tickcnt;   
  10           
  11          /********************* Timer0中断函数************************/
  12          void timer0_int (void) interrupt TIMER0_VECTOR
  13          {
  14   1          static INT32U tickcnt = 0;
  15   1          static  unsigned char Testtt=0;
  16   1        if ( ++tickcnt >= RML_SYSTICK_TIME )
  17   1        {
  18   2          tickcnt = 0;
  19   2        
  20   2          r_tickcnt++;
  21   2          if(r_tickcnt>65535){
  22   3      
  23   3            r_tickcnt=0;
  24   3         } 
  25   2      //   
  26   2        }
  27   1          Testtt++;
  28   1       
  29   1          if(Testtt>1){
  30   2      
  31   2               Testtt=0;
  32   2      //        P14=~P14;
  33   2      
  34   2              }   
  35   1      //r_tickcnt=0;
  36   1      
  37   1      //}
  38   1      //  
  39   1          
  40   1           
  41   1      }
  42          
  43          /********************* Timer1中断函数************************/
  44          void timer1_int (void) interrupt TIMER1_VECTOR
  45          {
  46   1        
  47   1       
  48   1      //  if(P10)
  49   1      //  {
  50   1      //    TH1 = (u8)(PWM_low >> 8); //如果是输出高电平，则装载低电平时间。
  51   1      //    TL1 = (u8)PWM_low;
  52   1      //  }
  53   1      //  else
  54   1      //  {
C51 COMPILER V9.52.0.0   TIMER                                                             04/18/2016 13:40:32 PAGE 2   

  55   1      //    TH1 = (u8)(PWM_high >> 8);  //如果是输出低电平，则装载高电平时间。
  56   1      //    TL1 = (u8)PWM_high;
  57   1      //  }
  58   1      
  59   1      }
  60          
  61          /********************* Timer2中断函数************************/
  62          //void timer2_int (void) interrupt TIMER2_VECTOR
  63          //{
  64          //   
  65          //}
  66          /************************ 定时器配置 ****************************/
  67          void  Timer_config(void)
  68          {
  69   1        
  70   1        TIM_InitTypeDef   TIM_InitStructure1;         //结构定义
  71   1        TIM_InitTypeDef   TIM_InitStructure;          //结构定义
  72   1        TIM_InitStructure.TIM_Mode      = TIM_16Bit;  //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitAuto
             -Reload,TIM_16BitAutoReloadNoMask
  73   1        TIM_InitStructure.TIM_Polity    = PolityHigh;     //指定中断优先级, PolityHigh,PolityLow
  74   1        TIM_InitStructure.TIM_Interrupt = ENABLE;       //中断是否允许,   ENABLE或DISABLE
  75   1        TIM_InitStructure.TIM_ClkSource = TIM_CLOCK_1T;     //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLOCK_
             -Ext
  76   1        TIM_InitStructure.TIM_ClkOut    = DISABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  77   1        TIM_InitStructure.TIM_Value     = 65536UL - 2700; //初值,
  78   1        TIM_InitStructure.TIM_Run       = ENABLE;       //是否初始化后启动定时器, ENABLE或DISABLE
  79   1        Timer_Inilize(Timer0,&TIM_InitStructure);       //初始化Timer0    Timer0,Timer1,Timer2
  80   1      //  
  81   1      //  
  82   1        
  83   1        
  84   1      //  TIM_InitStructure1.TIM_Mode      = TIM_16Bit; //指定工作模式,   TIM_16BitAutoReload,TIM_16Bit,TIM_8BitA
             -utoReload,TIM_16BitAutoReloadNoMask
  85   1      //  TIM_InitStructure1.TIM_Polity    = PolityHigh;      //指定中断优先级, PolityHigh,PolityLow
  86   1      //  TIM_InitStructure1.TIM_Interrupt = ENABLE;        //中断是否允许,   ENABLE或DISABLE
  87   1      //  TIM_InitStructure1.TIM_ClkSource = TIM_CLOCK_1T;      //指定时钟源,     TIM_CLOCK_1T,TIM_CLOCK_12T,TIM_CLO
             -CK_Ext
  88   1      //  TIM_InitStructure1.TIM_ClkOut    = ENABLE;        //是否输出高速脉冲, ENABLE或DISABLE
  89   1      //  TIM_InitStructure1.TIM_Value     = 65536UL - PWM_HIGH_MIN;  //初值,
  90   1      //  TIM_InitStructure1.TIM_Run       = ENABLE;        //是否初始化后启动定时器, ENABLE或DISABLE
  91   1      //  Timer_Inilize(Timer1,&TIM_InitStructure1);        //初始化Timer0    Timer0,Timer1,Timer2
  92   1        
  93   1        
  94   1      }
*** WARNING C280 IN LINE 70 OF BSP\Timer.c: 'TIM_InitStructure1': unreferenced local variable
  95          
  96          //========================================================================
  97          // 函数: u8 Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
  98          // 描述: 定时器初始化程序.
  99          // 参数: TIMx: 结构参数,请参考timer.h里的定义.
 100          // 返回: 成功返回0, 空操作返回1,错误返回2.
 101          // 版本: V1.0,  
 102          //========================================================================
 103          u8  Timer_Inilize(u8 TIM, TIM_InitTypeDef *TIMx)
 104          {
 105   1        if(TIM > Timer2)  return 1; //空操作
 106   1      
 107   1        if(TIM == Timer0)
 108   1        {
 109   2          TR0 = 0;    //停止计数
 110   2          if(TIMx->TIM_Interrupt == ENABLE)   ET0 = 1;  //允许中断
 111   2          else                  ET0 = 0;  //禁止中断
C51 COMPILER V9.52.0.0   TIMER                                                             04/18/2016 13:40:32 PAGE 3   

 112   2          if(TIMx->TIM_Polity == PolityHigh)    PT0 = 1;  //高优先级中断
 113   2          else                  PT0 = 0;  //低优先级中断
 114   2          if(TIMx->TIM_Mode >  TIM_16BitAutoReloadNoMask) return 2; //错误
 115   2          TMOD = (TMOD & ~0x03) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3:
             - 16位自动重装, 不可屏蔽中断
 116   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x80;  //12T
 117   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x80;  //1T
 118   2          
 119   2      //    if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x04;  //对外计数或分频
 120   2      //    else                    TMOD &= ~0x04;  //定时
 121   2          
 122   2        TMOD &= 0xF0;   //设置定时器模式
 123   2        TMOD |= 0x01;   //设置定时器模式
 124   2          
 125   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x01;  //输出时钟
 126   2          else    INT_CLKO &= ~0x01;  //不输出时钟
 127   2          
 128   2          TH0 = (u8)(TIMx->TIM_Value >> 8);
 129   2          TL0 = (u8)TIMx->TIM_Value;
 130   2       
 131   2          if(TIMx->TIM_Run == ENABLE) TR0 = 1;  //开始运行
 132   2          return  0;    //成功
 133   2        }
 134   1      
 135   1      if(TIM == Timer1)
 136   1        {
 137   2          TR1 = 0;    //停止计数
 138   2          if(TIMx->TIM_Interrupt == ENABLE)   ET1 = 1;  //允许中断
 139   2          else                  ET1 = 0;  //禁止中断
 140   2          if(TIMx->TIM_Polity == PolityHigh)    PT1 = 1;  //高优先级中断
 141   2          else                  PT1 = 0;  //低优先级中断
 142   2          if(TIMx->TIM_Mode >= TIM_16BitAutoReloadNoMask) return 2; //错误
 143   2          TMOD = (TMOD & ~0x30) | TIMx->TIM_Mode; //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装
 144   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~0x40;  //12T
 145   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  0x40;  //1T
 146   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  TMOD |=  0x40;  //对外计数或分频
 147   2          else                    TMOD &= ~0x40;  //定时
 148   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x02;  //输出时钟
 149   2          else              INT_CLKO &= ~0x02;  //不输出时钟
 150   2          
 151   2          TH1 = (u8)(TIMx->TIM_Value >> 8);
 152   2          TL1 = (u8)TIMx->TIM_Value;
 153   2          if(TIMx->TIM_Run == ENABLE) TR1 = 1;  //开始运行
 154   2          return  0;    //成功
 155   2        }
 156   1      
 157   1        if(TIM == Timer2)   //Timer2,固定为16位自动重装, 中断无优先级
 158   1        {
 159   2          AUXR &= ~(1<<4);  //停止计数
 160   2          if(TIMx->TIM_Interrupt == ENABLE)     IE2  |=  (1<<2);  //允许中断
 161   2          else                    IE2  &= ~(1<<2);  //禁止中断
 162   2          if(TIMx->TIM_ClkSource >  TIM_CLOCK_Ext)  return 2;
 163   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_12T)  AUXR &= ~(1<<2);  //12T
 164   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_1T)   AUXR |=  (1<<2);  //1T
 165   2          if(TIMx->TIM_ClkSource == TIM_CLOCK_Ext)  AUXR |=  (1<<3);  //对外计数或分频
 166   2          else                    AUXR &= ~(1<<3);  //定时
 167   2          if(TIMx->TIM_ClkOut == ENABLE)  INT_CLKO |=  0x04;  //输出时钟
 168   2          else              INT_CLKO &= ~0x04;  //不输出时钟
 169   2      
 170   2          TH2 = (u8)(TIMx->TIM_Value >> 8);
 171   2          TL2 = (u8)TIMx->TIM_Value;
 172   2          if(TIMx->TIM_Run == ENABLE) AUXR |=  (1<<4);  //开始运行
C51 COMPILER V9.52.0.0   TIMER                                                             04/18/2016 13:40:32 PAGE 4   

 173   2          return  0;    //成功
 174   2        }
 175   1        return 2; //错误
 176   1      }
 177          
 178          void Timer_Set(SYSTIMER *timer, INT32U alarm_time)
 179          {
 180   1        timer->start_cnt = r_tickcnt;
 181   1        timer->alarm_time = alarm_time; 
 182   1      }
 183          
 184          
 185          INT32U Timer_GetElapse(SYSTIMER *timer)
 186          {
 187   1        return  (r_tickcnt - timer->start_cnt) * RML_SYSTICK_TIME; 
 188   1      }
 189          void Timer_Reset(SYSTIMER *timer)
 190          {
 191   1        
 192   1        timer->start_cnt = r_tickcnt=0;
 193   1       
 194   1      }
 195          
 196           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    610    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
